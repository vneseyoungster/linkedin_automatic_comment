LinkedIn’s frontend uses the Ember.js framework, which structures its HTML using dynamic component rendering and assigns unique ‘ember’ IDs to key DOM elements. These ‘ember’ IDs, such as `id="ember123"`, are automatically generated by Ember to help the app track UI components and manage state effectively.
Ember.js Structure in LinkedIn
	•	LinkedIn standardized on Ember.js for building its SPA (Single Page Application) experience, which means much of the UI is rendered client-side by JavaScript, rather than being static HTML served from the backend.
	•	Each major UI component, like profile sections, posts, or sidebar modules, is wrapped in an element with a unique ember ID, for example `<div id="ember123" class="ember-view">`.
	•	The ember IDs are used internally to track component state and enable rerendering, but their actual values change from session to session and page reloads, hence they can’t be used for stable scraping or automation
    scraping ember IDs and their related content from LinkedIn in a single session is technically possible with Selenium, but there are important constraints and considerations.
Feasibility in Single Session
	•	Ember IDs are dynamically generated per session and page load, but within a single session, Selenium can locate each element by its current ember ID and extract the relevant content.
	•	You can use Selenium’s `find_elements_by_xpath`, `find_elements_by_id`, or `find_elements_by_css_selector` to loop through all elements matching ember ID patterns (e.g., elements with `ember-view` class or ID starting with `ember`)